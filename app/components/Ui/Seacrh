<!-- // app/components/SearchButton.vue
<script setup lang="ts">
// Ref untuk istilah pencarian, hasil pencarian, dan status modal
const searchTerm = ref('')
const search = ref<{ id: string, title: string, content: string, category: string }[]>([])
const open = ref(false)
const value = ref({})

// Router untuk navigasi
const router = useRouter()

// Fungsi untuk memperbarui data pencarian
async function updateSearchData() {
  // Ambil data dari koleksi artikel dan berita
  const { data: artikelData } = await useLazyAsyncData('search-artikel', () =>
    queryCollectionSearchSections('artikel'))
  const { data: beritaData } = await useLazyAsyncData('search-berita', () =>
    queryCollectionSearchSections('berita'))

  // Gabungkan data dari artikel dan berita
  search.value = [
    ...(artikelData?.value || []).map((item: any) => ({
      id: item.id,
      title: item.title,
      content: item.content,
      category: 'Artikel',
    })),
    ...(beritaData?.value || []).map((item: any) => ({
      id: item.id,
      title: item.title,
      content: item.content,
      category: 'Berita',
    })),
  ]
}

// Panggil pertama kali saat komponen di-mount
await updateSearchData()

// Computed untuk membuat grup berdasarkan hasil pencarian
const groups = computed(() => [
  {
    id: 'results',
    label: searchTerm.value
      ? `Results for “${searchTerm.value}”...`
      : 'Search Results',
    items: search.value
      .filter(item =>
        item.title.toLowerCase().includes(searchTerm.value.toLowerCase())
        || item.content.toLowerCase().includes(searchTerm.value.toLowerCase()),
      ) // Filter berdasarkan istilah pencarian di title atau content
      .map(item => ({
        id: item.id,
        label: item.title,
        suffix: `${item.content.slice(0, 50)}...`, // Cuplikan konten
        description: item.category, // Tampilkan kategori (Artikel/Berita)
        to: `/blog/${item.id}`, // URL navigasi
      })),
    ignoreFilter: true,
  },
])

// Fungsi untuk menangani pemilihan item di command palette
function onSelect(item: any) {
  if (item.to) {
    router.push(item.to)
  }
  open.value = false // Tutup modal setelah navigasi
}

// Shortcut keyboard untuk membuka modal pencarian
defineShortcuts({
  meta_k: () => {
    open.value = !open.value
  },
})
</script>

<template>
  <!-- Modal dengan Command Palette -->
  <UModal
    v-model:open="open"
    :ui="{
      content: 'rounded max-w-[calc(100%-1rem)] h-80 sm:h-auto sm:max-h-[calc(100vh-4rem)] mx-2 mx-auto overflow-y-auto',
    }"
    close-icon="ph:x-square-duotone"
  >
    <!-- Tombol untuk membuka modal -->
    <UButton
      square
      icon="hugeicons:search-02"
      aria-label="Search"
      class="button"
      @click="open = true"
    />

    <!-- Konten Command Palette -->
    <template #content>
      <UCommandPalette
        v-model="value"
        v-model:search-term="searchTerm"
        :groups="groups"
        class="flex-1 p-4 overflow-auto"
        :ui="{
          root: 'flex flex-col min-h-0 min-w-0 divide-y divide-[var(--ui-border)]',
        }"
        :fuse="{
          resultLimit: 10,
          matchAllWhenSearchEmpty: true,
          fuseOptions: { includeMatches: true },
        }"
        @update:model-value="onSelect"
      />
    </template>
  </UModal>
</template> -->
